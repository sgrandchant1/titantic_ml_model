# -*- coding: utf-8 -*-
"""santi_titanic_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JVeTkpdMPp_QW0lFXDTO62ttIEXqL7_m

#imports
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib
import numpy as np
from sklearn import tree
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay

df_train = pd.read_csv('train.csv')
df_train = df_train.drop(columns=['Name', 'Ticket', 'Cabin', 'PassengerId'])
label_encoders = {}
for column in ['Sex', 'Embarked']:
    le = LabelEncoder()
    df_train[column] = le.fit_transform(df_train[column].astype(str))
    label_encoders[column] = le
df_test = pd.read_csv('test.csv')
df_names = df_test.drop(columns=['Ticket', 'Cabin', 'Fare', 'Name', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Embarked'])
df_test = df_test.drop(columns=['Name', 'Ticket', 'Cabin', 'PassengerId'])
for column in ['Sex', 'Embarked']:
    le = LabelEncoder()
    df_test[column] = le.fit_transform(df_test[column].astype(str))
    label_encoders[column] = le

df_train

X = df_train.drop(columns=['Survived'])
y = df_train['Survived']

"""# Exploring data

total passengers
"""

total_passengers = df_train.shape[0]
total_passengers

"""class distribuition"""

df_train['Ticket'].value_counts()

df_train['Pclass'].value_counts()

"""gender distribuition"""

df_train['Sex'].value_counts()

"""age distribuition"""

df_train['Age'].value_counts()

"""siblings/spouse per passenger"""

df_train['SibSp'].value_counts()

"""parents/children per passenger"""

df_train['Parch'].value_counts()

"""embarked gate distribuition"""

df_train['Embarked'].value_counts()

number_females = df_train[df_train['Sex'] == 'female'].shape[0]
number_females

females_who_survived = df_train[(df_train['Sex'] == 'female') & (df_train['Survived'] == 1)].shape[0]
females_who_survived



sns.pairplot(df_train, hue='Survived', size=3)
plt.show()

sns.barplot(x='Sex', y='Survived', data=df_train)
plt.title('Survival Rate by Sex')
plt.show()

sns.barplot(x='Ticket', y='Survived', data=df_train)
plt.title('Survival Rate by Passenger Class')
plt.show()

sns.scatterplot(x='Pclass', y='Survived', data=df_train)
plt.title('Survival Rate by Passenger Class')
plt.show()

sns.barplot(x='Embarked', y='Survived', data=df_train)
plt.title('Survival Rate by Port of Embarkation')
plt.show()

sns.boxplot(x='Survived', y='Age', data=df_train)
plt.title('Age Distribution by Survival Status')
plt.show()

sns.boxplot(x='Survived', y='Fare', data=df_train)
plt.title('Fare Distribution by Survival Status')
plt.show()

sns.countplot(x='SibSp', hue='Survived', data=df_train)
plt.title('Sibling/Spouse Count by Survival Status')
plt.show()

sns.countplot(x='Parch', hue='Survived', data=df_train)
plt.title('Parent/Children Count by Survival Status')
plt.show()

"""# Train"""

predicting_model = DecisionTreeClassifier()

imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)
model = DecisionTreeClassifier()
model.fit(X_train, y_train)
predictions = model.predict(X_test)
#setting score variable
score = accuracy_score(y_test, predictions)
score

matrix = confusion_matrix(y_test, predictions)

# Display the confusion matrix
ConfusionMatrixDisplay(confusion_matrix=matrix, display_labels=model.classes_).plot()

"""# Test"""

joblib.dump(model, 'titanit_predictor.joblib')
names = df_names['PassengerId']
titanic_model = joblib.load('titanit_predictor.joblib')
df_test = imputer.fit_transform(df_test)
predictions = titanic_model.predict(df_test)
# for passenger_id, prediction in zip(passenger_ids, predictions):
#     print(f"{passenger_id}, {prediction}")
df_answers = pd.read_csv('gender_submission.csv')
answers = df_answers['Survived'].values
correct_predictions = sum(predictions == answers)
accuracy_percentage = (correct_predictions / len(answers)) * 100
accuracy_percentage

joblib.dump(model, 'titanit_predictor.joblib')

#drop all columns from df_test so that we dont get this mistake.
#df_names = df_test.drop(columns=['Ticket', 'Cabin', 'Fare', 'Name', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Embarked'])
names = df_names['PassengerId']
#passenger_ids = df_test['PassengerId'].values
titanic_model = joblib.load('titanit_predictor.joblib')
df_test = imputer.fit_transform(df_test)
predictions = titanic_model.predict(df_test)
for passenger_id, prediction in zip(passenger_ids, predictions):
    print(f"{passenger_id}, {prediction}")

df_answers = pd.read_csv('gender_submission.csv')
answers = df_answers['Survived'].values
correct_predictions = sum(predictions == answers)
accuracy_percentage = (correct_predictions / len(answers)) * 100
accuracy_percentage

for passenger_id, prediction, answer in zip(passenger_ids, predictions, answers):
    print(f"PassengerId: {passenger_id}, Prediction: {prediction}, Answer: {answer}")

correct_predictions = sum(predictions == answers)
accuracy_percentage = (correct_predictions / len(answers)) * 100
accuracy_percentage

